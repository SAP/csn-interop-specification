{
  "description": "Root of the CSN Interop Effective JSON document.\n\nSee [Primer: Root Level Structure](../primer.md#root-level-structure).",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://sap.github.io/csn-interop-specification/spec-v1/csn-interop-effective.schema.json",
  "title": "CSN Interop Root",
  "x-custom-typescript-types": [
    {
      "typeName": "PrivatePropertyKey",
      "typeValue": "`__${string}`"
    },
    {
      "typeName": "AnnotationPropertyKey",
      "typeValue": "`@${string}`"
    },
    {
      "typeName": "EntityKind",
      "typeValue": "\"entity\""
    },
    {
      "typeName": "ContextKind",
      "typeValue": "\"context\""
    },
    {
      "typeName": "ServiceKind",
      "typeValue": "\"service\""
    },
    {
      "typeName": "TypeKind",
      "typeValue": "\"type\""
    },
    {
      "typeName": "BooleanCdsType",
      "typeValue": "\"cds.Boolean\""
    },
    {
      "typeName": "StringCdsType",
      "typeValue": "\"cds.String\""
    },
    {
      "typeName": "LargeStringCdsType",
      "typeValue": "\"cds.LargeString\""
    },
    {
      "typeName": "IntegerCdsType",
      "typeValue": "\"cds.Integer\""
    },
    {
      "typeName": "Integer64CdsType",
      "typeValue": "\"cds.Integer64\""
    },
    {
      "typeName": "DecimalCdsType",
      "typeValue": "\"cds.Decimal\""
    },
    {
      "typeName": "DoubleCdsType",
      "typeValue": "\"cds.Double\""
    },
    {
      "typeName": "DateCdsType",
      "typeValue": "\"cds.Date\""
    },
    {
      "typeName": "TimeCdsType",
      "typeValue": "\"cds.Time\""
    },
    {
      "typeName": "DateTimeCdsType",
      "typeValue": "\"cds.DateTime\""
    },
    {
      "typeName": "TimestampCdsType",
      "typeValue": "\"cds.Timestamp\""
    },
    {
      "typeName": "UUIDCdsType",
      "typeValue": "\"cds.UUID\""
    },
    {
      "typeName": "AssociationCdsType",
      "typeValue": "\"cds.Association\""
    },
    {
      "typeName": "CompositionCdsType",
      "typeValue": "\"cds.Composition\""
    },
    {
      "typeName": "CustomTypeValue",
      "typeValue": "string // MUST not start with `cds.`"
    },
    {
      "typeName": "CdsTypeValue",
      "typeValue": "BooleanCdsType | StringCdsType | LargeStringCdsType | IntegerCdsType | Integer64CdsType | DecimalCdsType | DoubleCdsType | DateCdsType | TimeCdsType | DateTimeCdsType | TimestampCdsType | UUIDCdsType | AssociationCdsType | CompositionCdsType"
    }
  ],
  "definitions": {
    "Meta": {
      "title": "Meta",
      "type": "object",
      "description": "Meta information about the CSN document and its creator.",
      "properties": {
        "creator": {
          "type": "string",
          "description": "Informal description of the creator of this CSN Document.",
          "examples": [
            "CDS Compiler v4.5.0"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Meta",
            "creator"
          ]
        },
        "flavor": {
          "type": "string",
          "description": "Informal hint which CSN flavor is used. The values are currently NOT standardized.\n\nA CSN flavor can be understood as an alias to particular [feature set](#) of CSN overall.\nIn CSN Interop we leave some features open and to be defined in the document itself, this is why we don't have a fixed flavor.",
          "examples": [
            "effective",
            "inferred"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Meta",
            "flavor"
          ]
        },
        "document": {
          "$ref": "#/definitions/MetaDocument",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Meta",
            "document"
          ]
        },
        "features": {
          "$ref": "#/definitions/MetaFeatures",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Meta",
            "features"
          ]
        }
      },
      "patternProperties": {
        "^__.+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Private properties, starting with `__`.\n\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.\n",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey}"
        }
      },
      "examples": [
        {
          "creator": "CDS Compiler v4.5.0",
          "flavor": "inferred",
          "document": {
            "version": "1.2.1"
          }
        }
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "Meta"
      ]
    },
    "MetaDocument": {
      "title": "Document (Metadata)",
      "type": "object",
      "description": "Metadata that describes the document (and what it represents) itself.",
      "properties": {
        "version": {
          "type": "string",
          "description": "The version of the CSN document / the described model itself (not the specification).\n\nWe RECOMMEND to use the [SemVer](https://semver.org/) standard.",
          "examples": [
            "1.3.4"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "MetaDocument",
            "version"
          ]
        },
        "title": {
          "type": "string",
          "maxLength": 255,
          "description": "Human readable title for the CSN document (plain-text).\n\nMUST NOT contain linebreaks.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "MetaDocument",
            "title"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation that describes the overall CSN document.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "MetaDocument",
            "doc"
          ]
        }
      },
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "MetaDocument"
      ]
    },
    "MetaFeatures": {
      "title": "Features (Metadata)",
      "type": "object",
      "description": "CSN feature-dimensions this document fulfills.\n\nIt is RECOMMENDED to explicitly state all feature dimensions of the document.\nOtherwise the consumer cannot rely on the information and may have to figure this out on his own.",
      "properties": {
        "complete": {
          "type": "boolean",
          "description": "Whether this document is complete and self-contained.\n\nIt is RECOMMENDED to have complete CSN documents and set this to `true`.\n\nIf true references to other CDS elements (e.g. `cds.Association`) MUST be resolvable within the same document.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "MetaFeatures",
            "complete"
          ]
        }
      },
      "x-recommended": [
        "complete"
      ],
      "examples": [
        {
          "complete": true
        }
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "MetaFeatures"
      ]
    },
    "Definitions": {
      "title": "Definitions",
      "type": "object",
      "description": "Each entry in the definitions dictionary is a definition of a named modeling artefact.\nThe `name` is the absolute, fully qualified name of the definition, and the value is a record with the definition details.\n\nDefinition names MUST:\n- Not be an empty string.\n- Not start with `@`, `__`, `.`, `::`.\n- Not end with `.` or `::`.\n- Not contain the substring `..` or `:::`.\n- Not contain the substring `::` more than once.\n\nSee [Primer: Definitions](../primer.md#definitions).",
      "patternProperties": {
        "^(?![@]|__|\\.|::).+$": {
          "$ref": "#/definitions/DefinitionEntry"
        }
      },
      "minProperties": 1,
      "additionalProperties": false,
      "examples": [
        {
          "SomeEntity": {
            "kind": "entity",
            "elements": {
              "SomeElement": {
                "@SomeProperty.upperCase": true,
                "type": "cds.String"
              }
            }
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "Definitions"
      ]
    },
    "DefinitionEntry": {
      "type": "object",
      "description": "Definition of a CDS modeling artifact, put into [Definitions](#definitions).",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "context",
            "entity",
            "service",
            "type"
          ],
          "description": "The modeling artefact kind.\nIt's value is been used as a _discriminator_ to distinguish the matching schema that should be further validated.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefinitionEntry",
            "kind"
          ]
        }
      },
      "required": [
        "kind"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "kind": {
                "type": "string",
                "const": "context"
              }
            },
            "required": [
              "kind"
            ]
          },
          "then": {
            "$ref": "#/definitions/ContextDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "kind": {
                "type": "string",
                "const": "entity"
              }
            },
            "required": [
              "kind"
            ]
          },
          "then": {
            "$ref": "#/definitions/EntityDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "kind": {
                "type": "string",
                "const": "service"
              }
            },
            "required": [
              "kind"
            ]
          },
          "then": {
            "$ref": "#/definitions/ServiceDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "kind": {
                "type": "string",
                "const": "type"
              }
            },
            "required": [
              "kind"
            ]
          },
          "then": {
            "$ref": "#/definitions/TypeDefinition"
          }
        }
      ],
      "x-hide-properties": true,
      "title": "DefinitionEntry",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefinitionEntry"
      ]
    },
    "EntityDefinition": {
      "title": "Entity Definition",
      "type": "object",
      "description": "Entity definition refers to the structured description of an object or concept.\n\nIf it is exposed through a [Service](#service-definition), it describes a data model.\nTo expose it through a Service, the service name MUST be prefixed to the Entity name, separated by a `.` (dot).\nThe actual data serialization format is defined by the Service protocol and chosen data format [mapping](../mappings).\n\nIf the entity is not exposed via a service, it only describes a conceptual domain object.",
      "x-extension-points": [
        "Entity"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "const": "entity",
          "description": "The modeling artefact is an entity.",
          "tsType": "EntityKind",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "kind"
          ]
        },
        "elements": {
          "$ref": "#/definitions/ElementDefinitions",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "elements"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "doc"
          ]
        },
        "abstract": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "Proper syntax element in ABAP CDS producing Abstract CDS Entities",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "abstract"
          ]
        },
        "customEntity": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "Proper syntax element in ABAP CDS producing Custom CDS Entities",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "customEntity"
          ]
        },
        "tableFunction": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "Proper syntax element in ABAP CDS producing CDS Table Functions.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "tableFunction"
          ]
        },
        "externalEntity": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "Proper syntax element in ABAP CDS producing CDS  External Entities",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "externalEntity"
          ]
        },
        "providerContract": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "ABAP CDS Projection have the additional information of a provider contract",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "providerContract"
          ]
        },
        "rootEntity": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "ABAP CDS Root View Entities define a RAP Business Object.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "rootEntity"
          ]
        },
        "transient": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "Special kind of analytical ABAP CDS Projection view.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "transient"
          ]
        },
        "literal": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "In the selection element list of a CDS view.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "literal"
          ]
        },
        "toCompositionChild": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "When redirecting associations in ABAP CDS Projections with the additional keywords \"to composition child\", this indicates a Parent-Child-Composition an requires the redirection target to have a matching \"to parent\" association redefinition.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "toCompositionChild"
          ]
        },
        "toParent": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "description": "When redirecting associations in ABAP CDS Projections with the additional keywords \"to composition child\", this indicates a Parent-Child-Composition an requires the redirection target to have a matching \"to parent\" association redefinition.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "toParent"
          ]
        },
        "hana_on_asString": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "x-hide-property": true,
          "x-ignore-conventions": true,
          "description": "Contains the SQL on condition as string",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EntityDefinition",
            "hana_on_asString"
          ]
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.entityType": {
          "$ref": "#/definitions/@EntityRelationship.entityType"
        },
        "@EntityRelationship.entityIds": {
          "$ref": "#/definitions/@EntityRelationship.entityIds"
        },
        "@EntityRelationship.compositeReferences": {
          "$ref": "#/definitions/@EntityRelationship.compositeReferences"
        },
        "@EntityRelationship.temporalIds": {
          "$ref": "#/definitions/@EntityRelationship.temporalIds"
        },
        "@EntityRelationship.temporalReferences": {
          "$ref": "#/definitions/@EntityRelationship.temporalReferences"
        },
        "@EntityRelationship.referencesWithConstantIds": {
          "$ref": "#/definitions/@EntityRelationship.referencesWithConstantIds"
        },
        "@ObjectModel.compositionRoot": {
          "$ref": "#/definitions/@ObjectModel.compositionRoot"
        },
        "@ObjectModel.representativeKey": {
          "$ref": "#/definitions/@ObjectModel.representativeKey"
        },
        "@ObjectModel.modelingPattern": {
          "$ref": "#/definitions/@ObjectModel.modelingPattern"
        },
        "@ObjectModel.supportedCapabilities": {
          "$ref": "#/definitions/@ObjectModel.supportedCapabilities"
        },
        "@ODM.entityName": {
          "$ref": "#/definitions/@ODM.entityName"
        },
        "@ODM.oid": {
          "$ref": "#/definitions/@ODM.oid"
        },
        "@PersonalData.entitySemantics": {
          "$ref": "#/definitions/@PersonalData.entitySemantics"
        },
        "@PersonalData.dataSubjectRole": {
          "$ref": "#/definitions/@PersonalData.dataSubjectRole"
        },
        "@PersonalData.dataSubjectRoleDescription": {
          "$ref": "#/definitions/@PersonalData.dataSubjectRoleDescription"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "elements"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "EntityDefinition"
      ]
    },
    "ElementDefinitions": {
      "title": "Element Definitions",
      "type": "object",
      "description": "Dictionary of Element where the key is the name of the element and the value its definition.\n\nThe value can either be a standard [CDS Type](#cds-type) (`cds.*`) or a [Custom Type](#custom-type).\n\nElement names MUST:\n- Not be an empty string.\n- Not start with `@`, `__`, `::`.\n- Not end with `::`.\n- Not contain the substring `.` or `:::`.\n- Not contain the substring `::` more than once.",
      "minProperties": 1,
      "patternProperties": {
        "^(?![@]|__|\\.|::).+$": {
          "$ref": "#/definitions/ElementEntry"
        }
      },
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ElementDefinitions"
      ]
    },
    "ElementEntry": {
      "type": "object",
      "description": "Definition of an Element, as put into [Element Definitions](#element-definitions).\n\nAn element can be either of a standard [CDS Types](#cds-type) or a [Custom Type](#custom-type).",
      "properties": {
        "type": {
          "type": "string",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "ElementEntry",
            "type"
          ]
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "pattern": "^(cds\\.).*$"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/CdsType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "pattern": "^(?!cds\\.).*$"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/CustomType"
          }
        }
      ],
      "required": [
        "type"
      ],
      "x-hide-properties": true,
      "title": "ElementEntry",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ElementEntry"
      ]
    },
    "CdsType": {
      "title": "Cds Type",
      "type": "object",
      "description": "The native CDS Type of an element, which will always start with `cds.`.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The CDS type (`cds.*`), as defined by the CSN specification.",
          "enum": [
            "cds.Boolean",
            "cds.String",
            "cds.LargeString",
            "cds.Integer",
            "cds.Integer64",
            "cds.Decimal",
            "cds.Double",
            "cds.Date",
            "cds.Time",
            "cds.DateTime",
            "cds.Timestamp",
            "cds.UUID",
            "cds.Association",
            "cds.Composition"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CdsType",
            "type"
          ]
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Boolean"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/BooleanType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.String"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/StringType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.LargeString"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/LargeStringType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Integer"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/IntegerType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Integer64"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/Integer64Type"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Decimal"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DecimalType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Double"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DoubleType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Date"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DateType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Time"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/TimeType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.DateTime"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DateTimeType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Timestamp"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/TimestampType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.UUID"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/UUIDType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Association"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/AssociationType"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Composition"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/CompositionType"
          }
        }
      ],
      "required": [
        "type"
      ],
      "x-hide-properties": true,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CdsType"
      ]
    },
    "BooleanType": {
      "title": "Boolean Type",
      "type": "object",
      "description": "An element of type `cds.Boolean`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Boolean",
          "description": "The modeling artefact is a `cds.Boolean` type.",
          "tsType": "BooleanCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueBoolean",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanType",
            "default"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "BooleanType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Boolean",
          "default": {
            "val": true
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "BooleanType"
      ]
    },
    "StringType": {
      "title": "String Type",
      "type": "object",
      "description": "An element of type `cds.String`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.String",
          "description": "The modeling artefact is a `cds.String` type.",
          "tsType": "StringCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "enum"
          ]
        },
        "length": {
          "type": "number",
          "minimum": 1,
          "description": "Describes the maximum number of characters of the value.\nIf not provided, **unlimited** length is assumed.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringType",
            "length"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "StringType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.String",
          "key": true,
          "length": 3,
          "default": {
            "val": "foo"
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "StringType"
      ]
    },
    "LargeStringType": {
      "title": "LargeString Type",
      "type": "object",
      "description": "An element of type `cds.LargeString`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.LargeString",
          "description": "The modeling artefact is a `cds.LargeString` type.",
          "tsType": "LargeStringCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringType",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringType",
            "enum"
          ]
        },
        "length": {
          "type": "number",
          "minimum": 1,
          "description": "Describes the maximum number of characters of the value.\nIf not provided, **unlimited** length is assumed.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringType",
            "length"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "LargeStringType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.LargeString",
          "length": 3,
          "default": {
            "val": "large foo"
          },
          "notNull": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "LargeStringType"
      ]
    },
    "IntegerType": {
      "title": "Integer Type",
      "type": "object",
      "description": "An element of type `cds.Integer`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Integer",
          "description": "The modeling artefact is a `cds.Integer` type.",
          "tsType": "IntegerCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueInteger",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerType",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "IntegerType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Integer",
          "default": {
            "val": 123
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "IntegerType"
      ]
    },
    "Integer64Type": {
      "title": "Integer64 Type",
      "type": "object",
      "description": "An element of type `cds.Integer64`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Integer64",
          "description": "The modeling artefact is a `cds.Integer64` type.",
          "tsType": "Integer64CdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64Type",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64Type",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64Type",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64Type",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueInteger",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64Type",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64Type",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "Integer64Type"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Integer64",
          "default": {
            "val": 123
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "Integer64Type"
      ]
    },
    "DecimalType": {
      "title": "Decimal Type",
      "type": "object",
      "description": "An element of type `cds.Decimal`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Decimal",
          "description": "The modeling artefact is a `cds.Decimal` type.",
          "tsType": "DecimalCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueNumber",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "enum"
          ]
        },
        "precision": {
          "type": "number",
          "minimum": 1,
          "description": "Total number of digits in a number.\nThis includes both the digits before and after the decimal point.\n\nThe semantics of the choices follows the [OData v4 Precision](https://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_Precision) specification.",
          "default": 34,
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "precision"
          ]
        },
        "scale": {
          "oneOf": [
            {
              "$ref": "#/definitions/DecimalScaleNumber"
            },
            {
              "$ref": "#/definitions/DecimalScaleType"
            }
          ],
          "description": "Describes the number of digits to the right of the decimal point in a number.",
          "default": "floating",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalType",
            "scale"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "DecimalType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Decimal",
          "precision": 16,
          "scale": 3,
          "default": {
            "val": 12.3
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DecimalType"
      ]
    },
    "DoubleType": {
      "title": "Double Type",
      "type": "object",
      "description": "An element of type `cds.Double`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Double",
          "description": "The modeling artefact is a `cds.Double` type.",
          "tsType": "DoubleCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleType",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueNumber",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleType",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "DoubleType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Double",
          "default": {
            "val": 123
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DoubleType"
      ]
    },
    "DateType": {
      "title": "Date Type",
      "type": "object",
      "description": "An element of type `cds.Date`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Date",
          "description": "The modeling artefact is a `cds.Date` type.",
          "tsType": "DateCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateType",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "DateType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Date",
          "key": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DateType"
      ]
    },
    "TimeType": {
      "title": "Time Type",
      "type": "object",
      "description": "An element of type `cds.Time`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Time",
          "description": "The modeling artefact is a `cds.Time` type.",
          "tsType": "TimeCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeType",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "TimeType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Time",
          "key": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "TimeType"
      ]
    },
    "DateTimeType": {
      "title": "DateTime Type",
      "type": "object",
      "description": "An element of type `cds.DateTime`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.DateTime",
          "description": "The modeling artefact is a `cds.DateTime` type.",
          "tsType": "DateTimeCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeType",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "DateTimeType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.DateTime",
          "key": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DateTimeType"
      ]
    },
    "TimestampType": {
      "title": "Timestamp Type",
      "type": "object",
      "description": "An element of type `cds.Timestamp`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Timestamp",
          "description": "The modeling artefact is a `cds.Timestamp` type.",
          "tsType": "TimestampCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampType",
            "enum"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "TimestampType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Timestamp",
          "key": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "TimestampType"
      ]
    },
    "UUIDType": {
      "title": "UUID Type",
      "type": "object",
      "description": "An element of type `cds.UUID`.",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.UUID",
          "description": "The modeling artefact is a `cds.UUID` type.",
          "tsType": "UUIDCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDType",
            "default"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "UUIDType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.UUID",
          "key": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "UUIDType"
      ]
    },
    "AssociationType": {
      "title": "Association Type",
      "type": "object",
      "description": "An element of type `cds.Association`, to express a \"reference\" relation across Entities.\nIt works the same way as a [`cds.Composition`](#composition-type), with the difference that the latter assumes a composite relationship.\n\nSee [Primer: Associations](../primer.md#associations).",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Association",
          "description": "The modeling artefact is a `cds.Association` type.",
          "tsType": "AssociationCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationType",
            "type"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationType",
            "doc"
          ]
        },
        "target": {
          "type": "string",
          "description": "The (fully qualified) target entity name.",
          "x-association-target": [
            "#/definitions/EntityDefinition"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationType",
            "target"
          ]
        },
        "cardinality": {
          "type": "object",
          "$ref": "#/definitions/CardinalityObject",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationType",
            "cardinality"
          ]
        },
        "on": {
          "type": "array",
          "description": "The property `on` holds a sequence of operators and operands to describe the join condition.\n\nOne building block of the sequence consists of the following in the given order:\n- Reference to a field of the association or composition target\n- Equals Operator \"=\"\n- One of the following:\n  - Reference to a field of the source entity\n  - Constant Value\n\nThis building block states that the value of the first entry of the array using \"ref\" should equal the value of the third entry of the array.\nIn addition, several building blocks can be lined up using an \"and\" operator.\n\nSee also [CAP documentation](https://cap.cloud.sap/docs/cds/csn#assoc-on).",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/StructuredElementReference"
              },
              {
                "$ref": "#/definitions/EqualsOperator"
              },
              {
                "$ref": "#/definitions/AndOperator"
              },
              {
                "$ref": "#/definitions/OnValue"
              }
            ]
          },
          "examples": [
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "ref": [
                  "ConnectionID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "val": "1234567"
              }
            ]
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationType",
            "on"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "target",
        "cardinality",
        "on"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "AssociationType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Association",
          "target": "Airport",
          "cardinality": {
            "max": "*"
          },
          "on": [
            {
              "ref": [
                "to_DepartureAirport",
                "AirportID"
              ]
            },
            "=",
            {
              "ref": [
                "DepartureAirport_AirportID"
              ]
            }
          ]
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "AssociationType"
      ]
    },
    "CompositionType": {
      "title": "Composition Type",
      "type": "object",
      "description": "An element of type `cds.Composition`, to express a \"contains\" relation across Entities.\nIt works the same as a [`cds.Association`](#association-type).\n\nSee [Primer: Associations](../primer.md#associations).",
      "properties": {
        "type": {
          "type": "string",
          "const": "cds.Composition",
          "description": "The modeling artefact is a `cds.Composition` type.",
          "tsType": "CompositionCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionType",
            "type"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionType",
            "doc"
          ]
        },
        "target": {
          "type": "string",
          "description": "The (fully qualified) target entity name.",
          "x-association-target": [
            "#/definitions/EntityDefinition"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionType",
            "target"
          ]
        },
        "cardinality": {
          "type": "object",
          "$ref": "#/definitions/CardinalityObject",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionType",
            "cardinality"
          ]
        },
        "on": {
          "type": "array",
          "description": "The property `on` holds a sequence of operators and operands to describe the join condition.\n\nOne building block of the sequence consists of the following in the given order:\n- Reference to a field of the association or composition target\n- Equals Operator \"=\"\n- One of the following:\n  - Reference to a field of the source entity\n  - Constant Value\n\nThis building block states that the value of the first entry of the array using \"ref\" should equal the value of the third entry of the array.\nIn addition, several building blocks can be lined up using an \"and\" operator.\n\nSee also [CAP documentation](https://cap.cloud.sap/docs/cds/csn#assoc-on).",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/StructuredElementReference"
              },
              {
                "$ref": "#/definitions/EqualsOperator"
              },
              {
                "$ref": "#/definitions/AndOperator"
              },
              {
                "$ref": "#/definitions/OnValue"
              }
            ]
          },
          "examples": [
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "ref": [
                  "ConnectionID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "val": "1234567"
              }
            ]
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionType",
            "on"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "target",
        "cardinality",
        "on"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "CompositionType"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "type": "cds.Composition",
          "target": "Airport",
          "cardinality": {
            "max": "*"
          },
          "on": [
            {
              "ref": [
                "to_DepartureAirport",
                "AirportID"
              ]
            },
            "=",
            {
              "ref": [
                "DepartureAirport_AirportID"
              ]
            }
          ]
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CompositionType"
      ]
    },
    "CustomType": {
      "title": "Custom Type",
      "type": "object",
      "description": "An Element can be of a Custom Type (aka Derived Type) instead of a standard [CDS type](#cds-type).\nThis allows several Elements to share / reuse the same Custom Type definition.\nThis MAY also imply shared semantics.\n\nThe Custom Type has a custom `type` value, which is the name of the [Type Definition](#type-definition) describing the shared type.\nThis `type` value MUST NOT start with `cds.`, to avoid conflicts with core CDS data types.\n\nThe Type Definition that the Custom Type points to MUST be described in the same CSN document in the [definitions](#definitions) section with `\"kind\": \"type\"`.\nThe [Element](#elemententry) MUST NOT add properties that are not supported by the Custom Types base CDS type.\n\nCSN Interop Effective adds further constraints to make a simple type lookup possible:\n\n- A Custom Type MUST NOT point to another Custom Type (no recursion).\n- The properties and annotations of the Custom Type MUST be merged into the Element it is used, to fulfill the \"effective\" quality.\n\nThis will allow a consumer to do a simple dictionary lookup to find the [CDS Type](#cds-type) of a Custom Type.\nAll other properties describing the Custom Type can already be found at the Custom Type itself.\n\n> 🚧 TODO: Clarify if Custom Type can also be `cds.Association` or `cds.Composition`.\n> If yes, add `target`, `on` and `cardinality` here.\n",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^(?!cds\\.).*$",
          "description": "Use of a custom type. MUST not start with `cds.`.",
          "tsType": "CustomTypeValue",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "type"
          ]
        },
        "key": {
          "type": "boolean",
          "description": "Indicates that this element is used as a primary key.\nMultiple primary keys MAY be used in case of a composite ID.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "key"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueCustomDerived",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "enum"
          ]
        },
        "length": {
          "type": "number",
          "minimum": 1,
          "description": "Describes the maximum number of characters of the value.\nIf not provided, **unlimited** length is assumed.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "length"
          ]
        },
        "scale": {
          "oneOf": [
            {
              "$ref": "#/definitions/DecimalScaleNumber"
            },
            {
              "$ref": "#/definitions/DecimalScaleType"
            }
          ],
          "description": "Describes the number of digits to the right of the decimal point in a number.",
          "default": "floating",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "scale"
          ]
        },
        "precision": {
          "type": "number",
          "minimum": 1,
          "description": "Total number of digits in a number.\nThis includes both the digits before and after the decimal point.\n\nThe semantics of the choices follows the [OData v4 Precision](https://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_Precision) specification.",
          "default": 34,
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CustomType",
            "precision"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "Type",
        "CustomType"
      ],
      "examples": [
        {
          "type": "CONTROLLING_AREA",
          "key": true
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CustomType"
      ]
    },
    "DefaultValueCustomDerived": {
      "title": "Default Value (Custom Type)",
      "type": "object",
      "properties": {
        "val": {
          "type": [
            "string",
            "number",
            "boolean",
            "object",
            "null"
          ],
          "description": "Default Value for a [Custom Type](#custom-type).\n\nThe chosen value type MUST match the [CDS Type](#cds-type) that the custom type chose.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefaultValueCustomDerived",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefaultValueCustomDerived"
      ]
    },
    "DefaultValueBoolean": {
      "title": "Default Value (Boolean)",
      "type": "object",
      "properties": {
        "val": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Default Value for Boolean Type.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefaultValueBoolean",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefaultValueBoolean"
      ]
    },
    "DefaultValueString": {
      "title": "Default Value (String)",
      "type": "object",
      "properties": {
        "val": {
          "type": [
            "string",
            "null"
          ],
          "description": "Default Value for String Types.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefaultValueString",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefaultValueString"
      ]
    },
    "DefaultValueInteger": {
      "title": "Default Value integer",
      "type": "object",
      "properties": {
        "val": {
          "type": [
            "integer",
            "null"
          ],
          "description": "Default Value for Integer Type.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefaultValueInteger",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefaultValueInteger"
      ]
    },
    "DefaultValueNumber": {
      "title": "Default Value number",
      "type": "object",
      "properties": {
        "val": {
          "type": [
            "number",
            "null"
          ],
          "description": "Default Value for DecimalScaleNumber: Type.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefaultValueNumber",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefaultValueNumber"
      ]
    },
    "DefaultValueObject": {
      "title": "Default Value object",
      "type": "object",
      "properties": {
        "val": {
          "type": [
            "object",
            "null"
          ],
          "description": "Default Value for (structured) Object Types.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DefaultValueObject",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DefaultValueObject"
      ]
    },
    "EnumValue": {
      "title": "Value Object",
      "type": "object",
      "description": "Enum CQN literal value expression.\n\nThe literal expression optionally specifies a constant val as a literal plus optional annotations.",
      "properties": {
        "val": {
          "type": [
            "string",
            "number",
            "boolean",
            "null"
          ],
          "description": "Value of the enum.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EnumValue",
            "val"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "EnumValue"
      ]
    },
    "DecimalScaleNumber": {
      "title": "Decimal Scale (Number)",
      "type": "number",
      "description": "Total number of digits that are present after the decimal point in a number.\nThe scale can hold from zero up to the total numeric precision",
      "minimum": 0,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DecimalScaleNumber"
      ]
    },
    "DecimalScaleType": {
      "title": "Decimal Scale (Type)",
      "type": "string",
      "description": "The `cds.Decimal` type can also set `scale` to a fixed type.\n\nThe semantics of the choices follows the [OData v4 Scale](https://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_Scale) specification.",
      "oneOf": [
        {
          "const": "floating",
          "description": "The value floating means that the decimal property represents a decimal floating-point number whose number of significant digits is the value of the `precision`.\n\nSee https://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_Scale"
        }
      ],
      "default": "floating",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DecimalScaleType"
      ]
    },
    "CardinalityObject": {
      "title": "Cardinality Object",
      "type": "object",
      "description": "The cardinality indicates the number of instances of one entity that can or must be associated with each instance of another entity.\n\nSHOULD provide `min` and `max` values explicitly.",
      "properties": {
        "src": {
          "type": "number",
          "description": "Set to `1` to give a hint to database optimizers, that the relationship is \"one to\". \n\nIf `src` is not set then it is unknown and \"many to\" MAY be assumed.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CardinalityObject",
            "src"
          ]
        },
        "min": {
          "type": "number",
          "description": "Specifies the targets minimum cardinality.",
          "default": 0,
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CardinalityObject",
            "min"
          ]
        },
        "max": {
          "description": "Specifies the targets maximum cardinality.\n\nMUST be one of:\n- positive Integer (1,2,...)\n- `*` as String",
          "type": [
            "number",
            "string"
          ],
          "default": 1,
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CardinalityObject",
            "max"
          ]
        }
      },
      "x-recommended": [
        "min",
        "max"
      ],
      "examples": [
        {
          "max": "*"
        },
        {
          "min": 1,
          "max": "*"
        }
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CardinalityObject"
      ]
    },
    "StructuredElementReference": {
      "title": "Structured Element Reference",
      "type": "object",
      "description": "Describes the target or source of the association.",
      "properties": {
        "ref": {
          "type": "array",
          "description": "Description of the target with *association name* and *target element name* in target entity`\nDescription of the source *source element name*\n\nMUST NOT:\n- use $ as leading character of an element\n- use session variables",
          "items": {
            "type": "string",
            "x-association-target": [
              "#/definitions/CdsType"
            ]
          },
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StructuredElementReference",
            "ref"
          ]
        }
      },
      "required": [
        "ref"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "StructuredElementReference"
      ]
    },
    "EqualsOperator": {
      "title": "Equals Operator",
      "type": "string",
      "description": "The operator \"=\"",
      "const": "=",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "EqualsOperator"
      ]
    },
    "AndOperator": {
      "title": "AND Operator",
      "type": "string",
      "description": "The operator \"and\"",
      "const": "and",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "AndOperator"
      ]
    },
    "OnValue": {
      "title": "On Value",
      "type": "object",
      "description": "Value for an on condition",
      "properties": {
        "val": {
          "type": [
            "string",
            "number"
          ],
          "description": "Value for the on condition.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "OnValue",
            "val"
          ]
        }
      },
      "required": [
        "val"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "OnValue"
      ]
    },
    "EnumDictionary": {
      "title": "Enum Dictionary",
      "description": "Dictionary of enum member elements with the name being the enum symbol and the value being a CQN literal value expression.",
      "type": "object",
      "patternProperties": {
        "^.+$": {
          "$ref": "#/definitions/EnumValue"
        }
      },
      "examples": [
        {
          "submitted": {
            "val": 1
          },
          "fulfilled": {
            "val": 2
          }
        },
        {
          "male": {},
          "female": {},
          "non_binary": {
            "val": "non-binary"
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "EnumDictionary"
      ]
    },
    "ElementReference": {
      "title": "Element Reference",
      "description": "Element reference denotes a reference to an element.\n\nIt is RECOMMENDED to use the ElementReferenceObject notation.\n\nSee [Primer: Literals for Enum and ElementRef values](../primer.md#literals-for-enum-and-elementref-values).",
      "oneOf": [
        {
          "$ref": "#/definitions/ElementReferenceString"
        },
        {
          "$ref": "#/definitions/ElementReferenceObject"
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ElementReference"
      ]
    },
    "ElementReferenceString": {
      "title": "Element Reference String",
      "type": "string",
      "description": "Element reference denotes a reference to an element, i.e. a member of the elements object of an entity in the following format:\n```js\n\"<definition name>\": {\n  \"<annotation key of type ElementReference>\": \"<element name>\"\n```",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ElementReferenceString"
      ]
    },
    "ElementReferenceObject": {
      "title": "Element Reference Object",
      "type": "object",
      "description": "Element reference denotes a reference to an element, i.e. a member fo the elements object of an entity in the following format:\n\n```js\n\"<definition name>\": {\n  \"<annotation key of type ElementReference>\": {\"=\": \"<element name>\"}\n```",
      "properties": {
        "=": {
          "type": "string",
          "description": "This is the references elements name.",
          "x-association-target": [
            "#/definitions/CdsType"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "ElementReferenceObject",
            "="
          ]
        }
      },
      "required": [
        "="
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ElementReferenceObject"
      ]
    },
    "EnumValueObject": {
      "title": "Enum Value Object",
      "type": "object",
      "description": "Enum values are given in object format:\n\n```js\n\"<definition name>\": {\n  \"<annotation key of type Enum>\": {\"#\": \"<enum value>\"}\n```",
      "properties": {
        "#": {
          "type": "string",
          "description": "The enum value as a string.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "EnumValueObject",
            "#"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "#"
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "EnumValueObject"
      ]
    },
    "TypeDefinition": {
      "title": "Type Definition",
      "type": "object",
      "description": "In CSN it is possible to define [Custom Types](#custom-type).\nThey can be referred to in [Element](#elemententry) `type`, making them \"reusable\" / \"shared\" types.\n\nIn CSN Interop Effective, the \"effective\" quality brings additional requirements:\n\n- The derived types MUST always have a `cds.*` type and MUST NOT point to other derived types.\n  This ensures that consumers do not have to support recursive type lookups.\n\n- Attributes and annotations MUST be also copied and merged with those defined in the [element](#elemententry) using this derived type.\n  This ensures that consumers only have to lookup the CDS type and don't have to merge attributes and annotations.",
      "x-extension-points": [
        "TypeDefinition",
        "Type"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types.\nIn this case `Kind = \"type\"` MUST be provided.",
          "tsType": "TypeKind",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "description": "The CDS data type of the derived type.\n\nCustom types in CSN Interop Effective MUST always point to a `cds.*` type.",
          "enum": [
            "cds.Boolean",
            "cds.String",
            "cds.LargeString",
            "cds.Integer",
            "cds.Integer64",
            "cds.Decimal",
            "cds.Double",
            "cds.Date",
            "cds.Time",
            "cds.DateTime",
            "cds.Timestamp",
            "cds.UUID",
            "cds.Association",
            "cds.Composition"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TypeDefinition",
            "type"
          ]
        },
        "@Aggregation.default": {
          "$ref": "#/definitions/@Aggregation.default"
        },
        "@AnalyticsDetails.measureType": {
          "$ref": "#/definitions/@AnalyticsDetails.measureType"
        },
        "@Consumption.valueHelpDefinition": {
          "$ref": "#/definitions/@Consumption.valueHelpDefinition"
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.heading": {
          "$ref": "#/definitions/@EndUserText.heading"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@EntityRelationship.propertyType": {
          "$ref": "#/definitions/@EntityRelationship.propertyType"
        },
        "@EntityRelationship.reference": {
          "$ref": "#/definitions/@EntityRelationship.reference"
        },
        "@ObjectModel.semanticKey": {
          "$ref": "#/definitions/@ObjectModel.semanticKey"
        },
        "@ObjectModel.foreignKey.association": {
          "$ref": "#/definitions/@ObjectModel.foreignKey.association"
        },
        "@ObjectModel.text.element": {
          "$ref": "#/definitions/@ObjectModel.text.element"
        },
        "@ObjectModel.text.association": {
          "$ref": "#/definitions/@ObjectModel.text.association"
        },
        "@ODM.oidReference.entityName": {
          "$ref": "#/definitions/@ODM.oidReference.entityName"
        },
        "@PersonalData.fieldSemantics": {
          "$ref": "#/definitions/@PersonalData.fieldSemantics"
        },
        "@PersonalData.isPotentiallyPersonal": {
          "$ref": "#/definitions/@PersonalData.isPotentiallyPersonal"
        },
        "@PersonalData.isPotentiallySensitive": {
          "$ref": "#/definitions/@PersonalData.isPotentiallySensitive"
        },
        "@Semantics.currencyCode": {
          "$ref": "#/definitions/@Semantics.currencyCode"
        },
        "@Semantics.amount.currencyCode": {
          "$ref": "#/definitions/@Semantics.amount.currencyCode"
        },
        "@Semantics.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.unitOfMeasure"
        },
        "@Semantics.quantity.unitOfMeasure": {
          "$ref": "#/definitions/@Semantics.quantity.unitOfMeasure"
        },
        "@Semantics.calendar.dayOfMonth": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfMonth"
        },
        "@Semantics.calendar.dayOfYear": {
          "$ref": "#/definitions/@Semantics.calendar.dayOfYear"
        },
        "@Semantics.calendar.week": {
          "$ref": "#/definitions/@Semantics.calendar.week"
        },
        "@Semantics.calendar.month": {
          "$ref": "#/definitions/@Semantics.calendar.month"
        },
        "@Semantics.calendar.quarter": {
          "$ref": "#/definitions/@Semantics.calendar.quarter"
        },
        "@Semantics.calendar.halfyear": {
          "$ref": "#/definitions/@Semantics.calendar.halfyear"
        },
        "@Semantics.calendar.year": {
          "$ref": "#/definitions/@Semantics.calendar.year"
        },
        "@Semantics.calendar.yearWeek": {
          "$ref": "#/definitions/@Semantics.calendar.yearWeek"
        },
        "@Semantics.calendar.yearMonth": {
          "$ref": "#/definitions/@Semantics.calendar.yearMonth"
        },
        "@Semantics.calendar.yearQuarter": {
          "$ref": "#/definitions/@Semantics.calendar.yearQuarter"
        },
        "@Semantics.calendar.yearHalfyear": {
          "$ref": "#/definitions/@Semantics.calendar.yearHalfyear"
        },
        "@Semantics.fiscal.yearVariant": {
          "$ref": "#/definitions/@Semantics.fiscal.yearVariant"
        },
        "@Semantics.fiscal.period": {
          "$ref": "#/definitions/@Semantics.fiscal.period"
        },
        "@Semantics.fiscal.year": {
          "$ref": "#/definitions/@Semantics.fiscal.year"
        },
        "@Semantics.fiscal.yearPeriod": {
          "$ref": "#/definitions/@Semantics.fiscal.yearPeriod"
        },
        "@Semantics.fiscal.quarter": {
          "$ref": "#/definitions/@Semantics.fiscal.quarter"
        },
        "@Semantics.fiscal.yearQuarter": {
          "$ref": "#/definitions/@Semantics.fiscal.yearQuarter"
        },
        "@Semantics.fiscal.week": {
          "$ref": "#/definitions/@Semantics.fiscal.week"
        },
        "@Semantics.fiscal.yearWeek": {
          "$ref": "#/definitions/@Semantics.fiscal.yearWeek"
        },
        "@Semantics.fiscal.dayOfYear": {
          "$ref": "#/definitions/@Semantics.fiscal.dayOfYear"
        },
        "@Semantics.language": {
          "$ref": "#/definitions/@Semantics.language"
        },
        "@Semantics.time": {
          "$ref": "#/definitions/@Semantics.time"
        },
        "@Semantics.text": {
          "$ref": "#/definitions/@Semantics.text"
        },
        "@Semantics.uuid": {
          "$ref": "#/definitions/@Semantics.uuid"
        },
        "@Semantics.businessDate.from": {
          "$ref": "#/definitions/@Semantics.businessDate.from"
        },
        "@Semantics.businessDate.to": {
          "$ref": "#/definitions/@Semantics.businessDate.to"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Boolean"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/BooleanTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.String"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/StringTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.LargeString"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/LargeStringTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Integer"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/IntegerTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Integer64"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/Integer64TypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Decimal"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DecimalTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Double"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DoubleTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Date"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DateTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Time"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/TimeTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.DateTime"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/DateTimeTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Timestamp"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/TimestampTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.UUID"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/UUIDTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Association"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/AssociationTypeDefinition"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "type": "string",
                "const": "cds.Composition"
              }
            },
            "required": [
              "kind",
              "type"
            ]
          },
          "then": {
            "$ref": "#/definitions/CompositionTypeDefinition"
          }
        }
      ],
      "required": [
        "kind",
        "type"
      ],
      "x-hide-properties": true,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "TypeDefinition"
      ]
    },
    "BooleanTypeDefinition": {
      "title": "Boolean Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Boolean`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Boolean",
          "description": "The modeling artefact is a `cds.Boolean` type.",
          "tsType": "BooleanCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueBoolean",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "BooleanTypeDefinition",
            "default"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "BooleanTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.Boolean",
          "default": {
            "val": true
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "BooleanTypeDefinition"
      ]
    },
    "StringTypeDefinition": {
      "title": "String Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.String`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.String",
          "description": "The modeling artefact is a `cds.String` type.",
          "tsType": "StringCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "enum"
          ]
        },
        "length": {
          "type": "number",
          "minimum": 1,
          "description": "Describes the maximum number of characters of the value.\nIf not provided, **unlimited** length is assumed.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "StringTypeDefinition",
            "length"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "kind"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "StringTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.String",
          "length": 3,
          "default": {
            "val": "foo"
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "StringTypeDefinition"
      ]
    },
    "LargeStringTypeDefinition": {
      "title": "LargeString Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.LargeString`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.LargeString",
          "description": "The modeling artefact is a `cds.LargeString` type.",
          "tsType": "LargeStringCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "enum"
          ]
        },
        "length": {
          "type": "number",
          "minimum": 1,
          "description": "Describes the maximum number of characters of the value.\nIf not provided, **unlimited** length is assumed.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "LargeStringTypeDefinition",
            "length"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "kind"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "LargeStringTypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "LargeStringTypeDefinition"
      ]
    },
    "IntegerTypeDefinition": {
      "title": "Integer Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Integer`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Integer",
          "description": "The modeling artefact is a `cds.Integer` type.",
          "tsType": "IntegerCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueInteger",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "IntegerTypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "kind"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "IntegerTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.Integer",
          "default": {
            "val": 123
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "IntegerTypeDefinition"
      ]
    },
    "Integer64TypeDefinition": {
      "title": "Integer64 Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Integer64`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64TypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Integer64",
          "description": "The modeling artefact is a `cds.Integer64` type.",
          "tsType": "Integer64CdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64TypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64TypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64TypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueInteger",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64TypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "Integer64TypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "kind"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "Integer64TypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "Integer64TypeDefinition"
      ]
    },
    "DecimalTypeDefinition": {
      "title": "Decimal Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Decimal`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Decimal",
          "description": "The modeling artefact is a `cds.Decimal` type.",
          "tsType": "DecimalCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueNumber",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "enum"
          ]
        },
        "precision": {
          "type": "number",
          "minimum": 1,
          "description": "Total number of digits in a number.\nThis includes both the digits before and after the decimal point.\n\nThe semantics of the choices follows the [OData v4 Precision](https://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_Precision) specification.",
          "default": 34,
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "precision"
          ]
        },
        "scale": {
          "oneOf": [
            {
              "$ref": "#/definitions/DecimalScaleNumber"
            },
            {
              "$ref": "#/definitions/DecimalScaleType"
            }
          ],
          "description": "Describes the number of digits to the right of the decimal point in a number.",
          "default": "floating",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DecimalTypeDefinition",
            "scale"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "kind"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "DecimalTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.Decimal",
          "precision": 16,
          "scale": 3,
          "default": {
            "val": 12.3
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DecimalTypeDefinition"
      ]
    },
    "DoubleTypeDefinition": {
      "title": "Double Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Double`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Double",
          "description": "The modeling artefact is a `cds.Double` type.",
          "tsType": "DoubleCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueNumber",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DoubleTypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "type",
        "kind"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "DoubleTypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DoubleTypeDefinition"
      ]
    },
    "DateTypeDefinition": {
      "title": "Date Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Date`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Date",
          "description": "The modeling artefact is a `cds.Date` type.",
          "tsType": "DateCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "DateTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.Date"
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DateTypeDefinition"
      ]
    },
    "TimeTypeDefinition": {
      "title": "Time Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Time`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Time",
          "description": "The modeling artefact is a `cds.Time` type.",
          "tsType": "TimeCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimeTypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "TimeTypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "TimeTypeDefinition"
      ]
    },
    "DateTimeTypeDefinition": {
      "title": "DateTime Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.DateTime`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.DateTime",
          "description": "The modeling artefact is a `cds.DateTime` type.",
          "tsType": "DateTimeCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "DateTimeTypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "DateTimeTypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "DateTimeTypeDefinition"
      ]
    },
    "TimestampTypeDefinition": {
      "title": "Timestamp Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Timestamp`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Timestamp",
          "description": "The modeling artefact is a `cds.Timestamp` type.",
          "tsType": "TimestampCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampTypeDefinition",
            "default"
          ]
        },
        "enum": {
          "$ref": "#/definitions/EnumDictionary",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "TimestampTypeDefinition",
            "enum"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "TimestampTypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "TimestampTypeDefinition"
      ]
    },
    "UUIDTypeDefinition": {
      "title": "UUID Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.UUID`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.UUID",
          "description": "The modeling artefact is a `cds.UUID` type.",
          "tsType": "UUIDCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDTypeDefinition",
            "type"
          ]
        },
        "notNull": {
          "type": "boolean",
          "description": "Indicates that this element does not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDTypeDefinition",
            "notNull"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDTypeDefinition",
            "doc"
          ]
        },
        "default": {
          "$ref": "#/definitions/DefaultValueString",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "UUIDTypeDefinition",
            "default"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "UUIDTypeDefinition"
      ],
      "x-header-level": 4,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "UUIDTypeDefinition"
      ]
    },
    "AssociationTypeDefinition": {
      "title": "Association Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Association`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Association",
          "description": "The modeling artefact is a `cds.Association` type.",
          "tsType": "AssociationCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationTypeDefinition",
            "type"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationTypeDefinition",
            "doc"
          ]
        },
        "target": {
          "type": "string",
          "description": "The (fully qualified) target entity name.",
          "x-association-target": [
            "#/definitions/EntityDefinition"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationTypeDefinition",
            "target"
          ]
        },
        "cardinality": {
          "type": "object",
          "$ref": "#/definitions/CardinalityObject",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationTypeDefinition",
            "cardinality"
          ]
        },
        "on": {
          "type": "array",
          "description": "The property `on` holds a sequence of operators and operands to describe the join condition.\n\nOne building block of the sequence consists of the following in the given order:\n- Reference to a field of the association or composition target\n- Equals Operator \"=\"\n- One of the following:\n  - Reference to a field of the source entity\n  - Constant Value\n\nThis building block states that the value of the first entry of the array using \"ref\" should equal the value of the third entry of the array.\nIn addition, several building blocks can be lined up using an \"and\" operator.\n\nSee also [CAP documentation](https://cap.cloud.sap/docs/cds/csn#assoc-on).",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/StructuredElementReference"
              },
              {
                "$ref": "#/definitions/EqualsOperator"
              },
              {
                "$ref": "#/definitions/AndOperator"
              },
              {
                "$ref": "#/definitions/OnValue"
              }
            ]
          },
          "examples": [
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "ref": [
                  "ConnectionID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "val": "1234567"
              }
            ]
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "AssociationTypeDefinition",
            "on"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type",
        "target",
        "cardinality",
        "on"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "AssociationTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.Association",
          "target": "Airport",
          "cardinality": {
            "max": "*"
          },
          "on": [
            {
              "ref": [
                "to_DepartureAirport",
                "AirportID"
              ]
            },
            "=",
            {
              "ref": [
                "DepartureAirport_AirportID"
              ]
            }
          ]
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "AssociationTypeDefinition"
      ]
    },
    "CompositionTypeDefinition": {
      "title": "Composition Type Definition",
      "type": "object",
      "description": "A type definition of type `cds.Composition`.",
      "properties": {
        "kind": {
          "type": "string",
          "const": "type",
          "description": "The kind property is used when defining derived types. In this case Kind = \"type\".",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionTypeDefinition",
            "kind"
          ]
        },
        "type": {
          "type": "string",
          "const": "cds.Composition",
          "description": "The modeling artefact is a `cds.Composition` type.",
          "tsType": "CompositionCdsType",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionTypeDefinition",
            "type"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionTypeDefinition",
            "doc"
          ]
        },
        "target": {
          "type": "string",
          "description": "The (fully qualified) target entity name.",
          "x-association-target": [
            "#/definitions/EntityDefinition"
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionTypeDefinition",
            "target"
          ]
        },
        "cardinality": {
          "type": "object",
          "$ref": "#/definitions/CardinalityObject",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionTypeDefinition",
            "cardinality"
          ]
        },
        "on": {
          "type": "array",
          "description": "The property `on` holds a sequence of operators and operands to describe the join condition.\n\nOne building block of the sequence consists of the following in the given order:\n- Reference to a field of the association or composition target\n- Equals Operator \"=\"\n- One of the following:\n  - Reference to a field of the source entity\n  - Constant Value\n\nThis building block states that the value of the first entry of the array using \"ref\" should equal the value of the third entry of the array.\nIn addition, several building blocks can be lined up using an \"and\" operator.\n\nSee also [CAP documentation](https://cap.cloud.sap/docs/cds/csn#assoc-on).",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/StructuredElementReference"
              },
              {
                "$ref": "#/definitions/EqualsOperator"
              },
              {
                "$ref": "#/definitions/AndOperator"
              },
              {
                "$ref": "#/definitions/OnValue"
              }
            ]
          },
          "examples": [
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "ref": [
                  "ConnectionID"
                ]
              }
            ],
            [
              {
                "ref": [
                  "to_Connection",
                  "AirlineID"
                ]
              },
              "=",
              {
                "ref": [
                  "AirlineID"
                ]
              },
              "and",
              {
                "ref": [
                  "to_Connection",
                  "ConnectionID"
                ]
              },
              "=",
              {
                "val": "1234567"
              }
            ]
          ],
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "CompositionTypeDefinition",
            "on"
          ]
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind",
        "type",
        "target",
        "cardinality",
        "on"
      ],
      "additionalProperties": false,
      "x-extension-points": [
        "TypeDefinition",
        "CompositionTypeDefinition"
      ],
      "x-header-level": 4,
      "examples": [
        {
          "kind": "type",
          "type": "cds.Composition",
          "target": "Airport",
          "cardinality": {
            "max": "*"
          },
          "on": [
            {
              "ref": [
                "to_DepartureAirport",
                "AirportID"
              ]
            },
            "=",
            {
              "ref": [
                "DepartureAirport_AirportID"
              ]
            }
          ]
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CompositionTypeDefinition"
      ]
    },
    "ServiceDefinition": {
      "title": "Service Definition",
      "type": "object",
      "description": "A CDS Service indicates that [Entities](#entity-definition) are exposed to outside consumers via an API.\n\nTo assign Entities to a Service, the entity name MUST be prefixed with the service name, separated by a `.`.\nPlease be aware that this will also change the `target` values of `cds.Association` and `cds.Composition`.\nFor an example, see [airline-service.json](./examples/airline.md).\n\nA consumer MAY decide to shorten the names by only considering the Entities assigned to a particular Service and then removing the Service prefixes again.\n\nTo indicate which assigned Entities are root in a composition hierarchy, use the [`@ObjectModel.compositionRoot`](../annotations/objectmodel#objectmodelcompositionroot) annotation.\n\nSee [Primer: Service Definitions](../primer.md#service-definitions).",
      "x-extension-points": [
        "Service"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "const": "service",
          "description": "The modeling artefact is a service.",
          "tsType": "ServiceKind",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "ServiceDefinition",
            "kind"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "ServiceDefinition",
            "doc"
          ]
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        },
        "@ObjectModel.representativeKey": {
          "$ref": "#/definitions/@ObjectModel.representativeKey"
        },
        "@ObjectModel.modelingPattern": {
          "$ref": "#/definitions/@ObjectModel.modelingPattern"
        },
        "@ObjectModel.supportedCapabilities": {
          "$ref": "#/definitions/@ObjectModel.supportedCapabilities"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ServiceDefinition"
      ]
    },
    "ContextDefinition": {
      "title": "Context Definition",
      "type": "object",
      "description": "A context corresponds to a CAP CSN Namespace. It is used to create a bounded context that bundles elements of different kinds together.\nThe context will become part of the entity / element name.\n\nThe context is also useful to avoid local or global name collisions.\n\nSee [Primer: Context](../primer.md#context-definitions).",
      "x-extension-points": [
        "Context"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "const": "context",
          "description": "The modeling artefact is a context.",
          "tsType": "ContextKind",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "ContextDefinition",
            "kind"
          ]
        },
        "doc": {
          "type": "string",
          "description": "Human readable documentation, usually for developer documentation.\n\nSHOULD be provided and interpreted as [CommonMark](https://spec.commonmark.org/) (Markdown).\n\nIf a human readable title is needed, use the [@EndUserText.label](../annotations/enduser-text#endusertextlabel) annotation.",
          "x-context": [
            "./spec/v1/CSN-Interop-Effective.schema.yaml",
            "ContextDefinition",
            "doc"
          ]
        },
        "@EndUserText.label": {
          "$ref": "#/definitions/@EndUserText.label"
        },
        "@EndUserText.quickInfo": {
          "$ref": "#/definitions/@EndUserText.quickInfo"
        }
      },
      "patternProperties": {
        "^(@|__).+$": {
          "type": [
            "string",
            "number",
            "boolean",
            "array",
            "object"
          ],
          "description": "Annotations or private properties MAY be added.\n\n**Annotations** MUST start with `@`.\n\nIn CSN Interop Effective the annotations MUST follow the \"flattened\" form:\nEvery record / object in an annotation will be flattened into a `.` (dot).\nException: Once there is an array, the flattening is stopped and the values inside the array are preserved as they are (\"structured\").\n\nCorrect annotations examples:\n- `\"@Common.bar\": \"foo\"`\n- `\"@Common.foo.bar\": true`\n- `\"@Common.array\": [{ \"foo\": true }]`\n\nOr\n\n**Private properties**, starting with `__`.\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.",
          "tsType": "unknown // replaceKeyType_{PrivatePropertyKey|AnnotationPropertyKey}"
        }
      },
      "required": [
        "kind"
      ],
      "additionalProperties": false,
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "ContextDefinition"
      ]
    },
    "i18n": {
      "title": "i18n",
      "type": "object",
      "description": "i18n contains translated texts for one or more languages.\nThey are usually used in annotations like [`@EnduserText`](../annotations/enduser-text).\n\nKey is the language key, value is a dictionary of language text translations.\n\nThe language key MUST follow the standard of [RFC 1766](https://datatracker.ietf.org/doc/rfc1766/) (or IETF's [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)).\n\nSee [Primer: Language-dependent annotation values](../primer.md#language-dependent-annotation-values).",
      "patternProperties": {
        "^[a-zA-Z]{2,8}(-[a-zA-Z0-9]{1,8}){0,2}$": {
          "$ref": "#/definitions/LanguageText"
        }
      },
      "additionalProperties": false,
      "examples": [
        {
          "de": {
            "I_COSTCENTER@ENDUSERTEXT.LABEL": "Kostenstelle",
            "I_COSTCENTER.CONTROLLINGAREA@ENDUSERTEXT.LABEL": "Kostenrechnungskreis"
          }
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "i18n"
      ]
    },
    "LanguageText": {
      "title": "Language texts",
      "type": "object",
      "description": "Language Text contains translations for one specific languages.\n\nKey is the i18n key, value is the translation of the term.\n\nAn i18n pointer is a string that starts with `{i18n>` and ends with `}`. In between is the key.\n\nExample: To link to the i18n key `I_COSTCENTER@ENDUSERTEXT.LABEL`, the i18n pointer is `{i18n>I_COSTCENTER@ENDUSERTEXT.LABEL}`.\n\nThe i18n pointers within the document MUST be fully self contained:\n- An i18n resolved pointer MUST be used (referred to) within this CSN document at least once.\n- All i18n pointers in this CSN document MUST have a corresponding i18n dictionary entry.",
      "patternProperties": {
        "^.+$": {
          "type": "string",
          "description": "Translation of the term."
        }
      },
      "additionalProperties": false,
      "examples": [
        {
          "I_COSTCENTER@ENDUSERTEXT.LABEL": "Kostenstelle",
          "I_COSTCENTER.CONTROLLINGAREA@ENDUSERTEXT.LABEL": "Kostenrechnungskreis"
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "LanguageText"
      ]
    },
    "@Aggregation.default": {
      "description": "The element shall per default be aggregated using the annotated SQL aggregate function.\n\nThe chosen value defines which aggregation semantics should be applied.\nThe aggregation types SUM, MAX, MIN, NOP are only allowed for elements with numeric type\n\n> ℹ️ Note: There is an semantically equivalent annotation `@DefaultAggregation`, which is now obsolete.\n> As consumers are not expected to interpret `@DefaultAggregation`, providers shall consistently adopt `@Aggregation.default` for interoperability.",
      "type": "object",
      "properties": {
        "#": {
          "type": "string",
          "description": "Provide the value in `{ \"#\": \"<value>\" }` enum notation.",
          "oneOf": [
            {
              "const": "NONE",
              "description": "Indicates that the element is not a measure.\nUsually these elements are used in filters and GROUP BY-statements. Should not be used explicit.\nIt is the default for all elements which can be mapped to a dimension."
            },
            {
              "const": "SUM",
              "description": "Correspond to the standard SQL aggregation type."
            },
            {
              "const": "MIN",
              "description": "Correspond to the standard SQL aggregation type."
            },
            {
              "const": "MAX",
              "description": "Correspond to the standard SQL aggregation type."
            },
            {
              "const": "AVG",
              "description": "Correspond to the standard SQL aggregation type."
            },
            {
              "const": "COUNT_DISTINCT",
              "description": "Counts the number of distinct values of the element specified with `@Aggregation.referenceElement`.\n\n> TODO: `@Aggregation.referenceElement` is not yet documented here."
            },
            {
              "const": "NOP",
              "description": "Returns a value, if it is unique; otherwise it returns a special error value. It is the default in views with Analytics.dataCategory CUBE, FACT, and DIMENSION, if the data type of the element is numeric."
            },
            {
              "const": "FORMULA",
              "description": "The element is a formula which has to be calculated after the operands have been determined by aggregation or calculation. It should never be aggregated. If the element is not a formula, then this value must not be used. It is only supported in analytical queries. Example: Margin : = Revenue / Cost. If in a report Margin should be shown per OrgUnit, then first the aggregates of Revenue and Cost have to be de-termined per OrgUnit and then the Margin has to be calculated per OrgUn-it. The Margin for the company is not the aggregate of the Margin per Or-gUnit but has to be calculated separately by Revenue for all OrgUnits divided by the Costs for all OrgUnits."
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "#"
      ],
      "x-extension-targets": [
        "Type"
      ],
      "examples": [
        {
          "#": "SUM"
        }
      ]
    },
    "@AnalyticsDetails.measureType": {
      "description": "Specifies in which way a measure should treated.",
      "type": "object",
      "properties": {
        "#": {
          "type": "string",
          "description": "Provide the value in `{ \"#\": \"<value>\" }` enum notation.",
          "oneOf": [
            {
              "const": "BASE",
              "description": "Measure from the provider."
            },
            {
              "const": "RESTRICTION",
              "description": "Restricted measure."
            },
            {
              "const": "CALCULATION",
              "description": "Calculated measure (formula)."
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "#"
      ],
      "x-extension-targets": [
        "Type"
      ],
      "examples": [
        {
          "#": "BASE"
        }
      ]
    },
    "@Consumption.valueHelpDefinition": {
      "type": "array",
      "description": "The property defines how value helps for this element shall be constructed.\n\nIt allows to associate a (set of) View/Entity that provides the \"Value Help\" for the annotated field or parameter.\nThis is achieved by either referencing the target view/entity of a modelled association or by directly establishing a relationship to view/entity that shall act as a value help provider.",
      "items": {
        "$ref": "#/definitions/@Consumption.ConsumptionValueHelpDefinition"
      },
      "x-extension-targets": [
        "Entity",
        "Type"
      ]
    },
    "@Consumption.ConsumptionValueHelpDefinition": {
      "title": "Consumption Value Help Definition",
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/@Consumption.ConsumptionValueHelpDefinition.Entity"
        },
        "additionalBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/@Consumption.ConsumptionValueHelpDefinition.AdditionalBinding"
          },
          "description": "Additional bindings for filtering the value help result list."
        },
        "association": {
          "x-ref-to-doc": {
            "title": "Element Reference",
            "ref": "#/definitions/ElementReference"
          },
          "description": "Reference to the modelled association (in local entity) for which the target view represents the value help providing view or entity for the annotated local field. The on-condition of the association may only contain bindings of the source and target fields that use an equal operator. All these bindings are automatically considered by the value help for both filter and result mappings.\nMutually exclusive to the usage of `valueHelpDefinition.entity`."
        },
        "distinctValues": {
          "type": "boolean",
          "description": "Specifies whether the value help result list shall only contain distinct values for the annotated field or parameter.\nIf set to true all mappings will be used for filtering, but only the value for the field/parameter which the value help was requested for will be returned by the value help.",
          "default": true
        }
      },
      "additionalProperties": false,
      "examples": [
        {
          "entity": {
            "name": "I_ControllingAreaStdVH",
            "element": "ControllingArea"
          }
        },
        {
          "entity": {
            "name": "I_CostCenterStdVH",
            "element": "CostCenter"
          },
          "additionalBinding": [
            {
              "localElement": "ControllingArea",
              "element": "ControllingArea"
            }
          ]
        },
        {
          "association": {
            "=": "to_Airline"
          }
        }
      ]
    },
    "@Consumption.ConsumptionValueHelpDefinition.Entity": {
      "title": "Consumption Value Help Definition",
      "description": "Value help defining view or entity.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the value help providing view or entity"
        },
        "element": {
          "type": "string",
          "description": "Name of the field of the value help view or entity, which the annotated local field or parameter is bound to.\n\nMutually exclusive to the usage of `valueHelpDefinition.association`."
        }
      },
      "additionalProperties": false
    },
    "@Consumption.ConsumptionValueHelpDefinition.AdditionalBinding": {
      "title": "Additional Binding",
      "description": "Allows to define additional bindings (besides the ones defined by `valueHelpDefinition.association` or `valueHelpDefinition.entity`) for filtering the value help result list and/or returning values from the selected value help record.",
      "type": "object",
      "properties": {
        "localElement": {
          "type": "string",
          "description": "Field of the current view/entity; mutually exclusive to the usage of `localParameter`."
        },
        "element": {
          "type": "string",
          "description": "Name of the field of the value help view or entity, which the annotated local field or parameter is bound to."
        },
        "usage": {
          "$ref": "#/definitions/@Consumption.ConsumptionValueHelpDefinition.AdditionalBinding.Usage"
        }
      },
      "additionalProperties": false
    },
    "@Consumption.ConsumptionValueHelpDefinition.AdditionalBinding.Usage": {
      "type": "object",
      "description": "The binding may either specify an additional filter-criterion on the value help list (`#FILTER`), or an additional result mapping for the selected value help record (`#RESULT`) or a combination thereof (`#FILTER_AND_RESULT`).\nIf not specified explicitly the usage is `#FILTER_AND_RESULT`.\nIf distinctValues is set to true, additional bindings must specify the usage as `#FILTER`.",
      "properties": {
        "#": {
          "type": "string",
          "description": "Provide the value in `{ \"#\": \"<value>\" }` enum notation.",
          "enum": [
            "FILTER",
            "RESULT",
            "FILTER_AND_RESULT"
          ],
          "default": "FILTER_AND_RESULT"
        }
      },
      "additionalProperties": false,
      "required": [
        "#"
      ],
      "examples": [
        {
          "#": "FILTER_AND_RESULT"
        }
      ]
    },
    "@EndUserText.label": {
      "type": "string",
      "description": "The property contains a human-readable text to be displayed on UIs (besides or instead of the technical name).\n\nCorresponds to CAP CDS `@title` annotation.",
      "examples": [
        "Sales Order Header",
        "{i18n>AD01PROFNR@ENDUSERTEXT.LABEL}"
      ],
      "x-extension-targets": [
        "Entity",
        "Type",
        "Service",
        "Context"
      ]
    },
    "@EndUserText.heading": {
      "type": "string",
      "description": "Defines a human-readable text that is displayed as column headers.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@EndUserText.quickInfo": {
      "type": "string",
      "description": "Defines a human-readable text that provides additional information compared to the label text.\nThe quickInfo is used for accessibility hints or the \"Mouse over\" function.\n\nCorresponds to CAP CDS `@description` annotation.",
      "examples": [
        "Sales Order Header that contains data relevant for all items"
      ],
      "x-extension-targets": [
        "Entity",
        "Type",
        "Service",
        "Context"
      ]
    },
    "@EntityRelationship.entityType": {
      "type": "string",
      "description": "Defines which [Entity Type](#entity-type) the current data object represents.\n\nThere could be several data objects that are assigned to the same Entity Type.\nOne data object can only have one Entity Type assigned, which corresponds to the applications own Entity Type definition.",
      "examples": [
        "sap.vdm.sont:BillOfMaterial"
      ],
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@EntityRelationship.propertyType": {
      "type": "string",
      "description": "Defines the logical [Property Type](#property-type) of a property.\nThe reason is to have an ID to relate to the property, especially to state that it can be used as an ID or is part of a composite ID.",
      "examples": [
        "sap.vdm.gfn:BillOfMaterialUUID"
      ],
      "x-extension-targets": [
        "Type"
      ]
    },
    "@EntityRelationship.entityIds": {
      "type": "array",
      "description": "Defines a list of IDs, which are available to look up the Entity Type or create a reference to it.\nAn Entity Type can have multiple IDs:\n* There can be **alternative IDs** that can also be used to create a reference to the Entity Type\n* Some ID properties form a **composite ID** together and need to be combined to function as a unique ID for references\n* This is indicated by a [`propertyTypes`](#property-type) array with more than one Property Type ID entry.",
      "items": {
        "$ref": "#/definitions/@EntityRelationship.EntityId"
      },
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@EntityRelationship.reference": {
      "type": "array",
      "description": "Defines references to other Entity Types based on a single ID.",
      "items": {
        "$ref": "#/definitions/@EntityRelationship.ReferenceTarget"
      },
      "x-extension-targets": [
        "Type"
      ]
    },
    "@EntityRelationship.compositeReferences": {
      "type": "array",
      "description": "Defines one or many references to other Entity Types based on a composite IDs.",
      "items": {
        "$ref": "#/definitions/@EntityRelationship.CompositeReference"
      },
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@EntityRelationship.temporalIds": {
      "type": "array",
      "description": "Defines a list of temporal IDs",
      "items": {
        "$ref": "#/definitions/@EntityRelationship.TemporalId"
      },
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@EntityRelationship.temporalReferences": {
      "type": "array",
      "description": "Defines a list of temporal references",
      "items": {
        "$ref": "#/definitions/@EntityRelationship.TemporalReference"
      },
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@EntityRelationship.referencesWithConstantIds": {
      "type": "array",
      "description": "Defines one or many references to other Entity Types based on a composite IDs where some properties of the references are constant values.",
      "items": {
        "$ref": "#/definitions/@EntityRelationship.ReferenceTargetWithConstantId"
      },
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@EntityRelationship.ReferenceTarget": {
      "title": "Reference Target",
      "type": "object",
      "description": "Defines a reference to another Entity Type based on a single ID.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name to describe the semantics of the reference."
        },
        "referencedEntityType": {
          "$ref": "#/definitions/@EntityRelationship.EntityTypeID"
        },
        "referencedPropertyType": {
          "$ref": "#/definitions/@EntityRelationship.PropertyTypeID"
        }
      },
      "required": [
        "referencedEntityType",
        "referencedPropertyType"
      ]
    },
    "@EntityRelationship.EntityId": {
      "title": "Entity ID",
      "type": "object",
      "description": "Defines an ID that can be used to look up the Entity Type or create a reference to it.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name to describe the semantics of the ID."
        },
        "description": {
          "type": "string",
          "description": "Optional description to describe the semantics of the ID."
        },
        "propertyTypes": {
          "type": "array",
          "description": "List of [Property Type](#property-type) IDs.",
          "items": {
            "$ref": "#/definitions/@EntityRelationship.PropertyTypeID"
          }
        }
      },
      "required": [
        "propertyTypes"
      ]
    },
    "@EntityRelationship.CompositeReference": {
      "title": "Composite Reference",
      "type": "object",
      "description": "Defines single a reference to another Entity Type based on a composite ID.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name to describe the semantics of the reference."
        },
        "referencedEntityType": {
          "$ref": "#/definitions/@EntityRelationship.EntityTypeID"
        },
        "referencedPropertyTypes": {
          "type": "array",
          "description": "List of properties, the composite ID consists of.",
          "items": {
            "$ref": "#/definitions/@EntityRelationship.ReferenceTargetdPropertyType"
          }
        }
      },
      "required": [
        "referencedEntityType",
        "referencedPropertyTypes"
      ]
    },
    "@EntityRelationship.ReferenceTargetdPropertyType": {
      "title": "Referenced Property Type",
      "type": "object",
      "description": "Grouping of the ID in the referenced entity, by its property type ID and the local name in this entity.",
      "properties": {
        "referencedPropertyType": {
          "$ref": "#/definitions/@EntityRelationship.PropertyTypeID"
        },
        "localPropertyName": {
          "$ref": "#/definitions/@EntityRelationship.LocalPropertyName"
        }
      },
      "required": [
        "referencedPropertyType",
        "localPropertyName"
      ]
    },
    "@EntityRelationship.TemporalId": {
      "title": "Temporal ID",
      "type": "object",
      "description": "Defines an ID that includes a temporal interval.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name to describe the semantics of the ID."
        },
        "description": {
          "type": "string",
          "description": "Optional description to describe the semantics of the ID."
        },
        "propertyTypes": {
          "type": "array",
          "description": "List of [Property Type](#property-type) IDs that are non-temporal.",
          "items": {
            "$ref": "#/definitions/@EntityRelationship.PropertyTypeID"
          }
        },
        "temporalIntervalType": {
          "type": "string",
          "description": "Interval which includes the boundaries.",
          "oneOf": [
            {
              "const": "CLOSED_CLOSED"
            },
            {
              "const": "OPEN_OPEN"
            },
            {
              "const": "OPEN_CLOSED"
            },
            {
              "const": "CLOSED_OPEN"
            }
          ],
          "examples": [
            "CLOSED_CLOSED"
          ]
        },
        "temporalType": {
          "type": "string",
          "description": "Temporal type.",
          "oneOf": [
            {
              "const": "DATE"
            },
            {
              "const": "DATETIME"
            }
          ],
          "examples": [
            "DATE"
          ]
        },
        "temporalIntervalStartProperty": {
          "$ref": "#/definitions/@EntityRelationship.LocalPropertyName",
          "description": "Property in the local entity that is used to define the start of the interval."
        },
        "temporalIntervalEndProperty": {
          "$ref": "#/definitions/@EntityRelationship.LocalPropertyName",
          "description": "Property in the local entity that is used to define the end of the interval."
        }
      },
      "required": [
        "propertyTypes",
        "temporalIntervalType",
        "temporalType",
        "temporalIntervalStartProperty",
        "temporalIntervalEndProperty"
      ]
    },
    "@EntityRelationship.TemporalReference": {
      "title": "Temporal Reference",
      "type": "object",
      "description": "Defines single temporal reference to another Entity Type.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name to describe the semantics of the reference."
        },
        "referencedEntityType": {
          "$ref": "#/definitions/@EntityRelationship.EntityTypeID"
        },
        "referencedPropertyTypes": {
          "type": "array",
          "description": "List of non-temporal properties the composite temporal ID consists of.",
          "items": {
            "$ref": "#/definitions/@EntityRelationship.ReferenceTargetdPropertyType"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the temporal reference.",
          "oneOf": [
            {
              "const": "TEMPORAL_DATE"
            }
          ],
          "examples": [
            "TEMPORAL_DATE"
          ]
        },
        "selectionDateProperty": {
          "$ref": "#/definitions/@EntityRelationship.LocalPropertyName",
          "description": "Property in the local entity that is used to select the right date interval."
        }
      },
      "required": [
        "referencedEntityType",
        "referencedPropertyTypes",
        "category",
        "selectionDateProperty"
      ]
    },
    "@EntityRelationship.ReferenceTargetWithConstantId": {
      "title": "Reference with Constant ID",
      "type": "object",
      "description": "Defines single a reference to another Entity Type based on a composite ID.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name to describe the semantics of the reference."
        },
        "description": {
          "type": "string",
          "description": "Optional description to describe the semantics of the reference."
        },
        "referencedEntityType": {
          "$ref": "#/definitions/@EntityRelationship.EntityTypeID"
        },
        "referencedPropertyTypes": {
          "type": "array",
          "description": "List of properties, the composite ID consists of.",
          "items": {
            "$ref": "#/definitions/@EntityRelationship.ReferenceTargetPropertyTypeWithConstantId"
          }
        }
      },
      "required": [
        "referencedEntityType",
        "referencedPropertyTypes"
      ]
    },
    "@EntityRelationship.ReferenceTargetPropertyTypeWithConstantId": {
      "title": "Referenced Property Type with Constant ID",
      "type": "object",
      "description": "Grouping  of the ID in the referenced entity, by its property type ID and either the local name in this entity or a constant value.",
      "properties": {
        "referencedPropertyType": {
          "$ref": "#/definitions/@EntityRelationship.PropertyTypeID"
        },
        "localPropertyName": {
          "$ref": "#/definitions/@EntityRelationship.LocalPropertyName"
        },
        "constantValue": {
          "type": "string",
          "description": "String serialization of the constant value of the property in the referenced entity."
        }
      },
      "required": [
        "referencedPropertyType"
      ]
    },
    "@EntityRelationship.PropertyTypeID": {
      "title": "Property Type ID",
      "type": "string",
      "description": "ID of the [Property Type](#property-type). The reason is to have an ID to relate to the property, especially to state that it can be used as an ID or is part of a composite ID.",
      "examples": [
        "sap.vdm.gfn:BillOfMaterialUUID"
      ]
    },
    "@EntityRelationship.EntityTypeID": {
      "title": "Entity Type ID",
      "type": "string",
      "description": "ID of the [Entity Type](#entity-type).",
      "examples": [
        "sap.vdm.sont:BillOfMaterial"
      ]
    },
    "@EntityRelationship.LocalPropertyName": {
      "title": "Local Property Name",
      "type": "string",
      "description": "Name of the property in the local Entity Type"
    },
    "@ObjectModel.compositionRoot": {
      "type": "boolean",
      "default": true,
      "description": "Entity is the root of a compositional hierarchy.",
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@ObjectModel.representativeKey": {
      "description": "In case of multiple key elements: key element which represents the entity (in the sense that the entity itself is the list of values for this key element)",
      "x-extension-targets": [
        "Entity",
        "Service"
      ],
      "x-ref-to-doc": {
        "title": "Element Reference",
        "ref": "#/definitions/ElementReference"
      },
      "$ref": "#/definitions/ElementReference"
    },
    "@ObjectModel.semanticKey": {
      "type": "array",
      "description": "The property contains element(s) which shall be used to display the key in UIs (instead of the technical key).",
      "x-extension-targets": [
        "Type"
      ],
      "items": {
        "x-ref-to-doc": {
          "title": "Element Reference",
          "ref": "#/definitions/ElementReference"
        }
      }
    },
    "@ObjectModel.modelingPattern": {
      "type": "object",
      "description": "The property declares the modeling pattern applied in this entity definition.",
      "x-extension-targets": [
        "Entity",
        "Service"
      ],
      "properties": {
        "#": {
          "type": "string",
          "description": "Provide the value in `{ \"#\": \"<value>\" }` enum notation.",
          "enum": [
            "DATA_STRUCTURE",
            "LANGUAGE_DEPENDENT_TEXT",
            "UNIT_CONVERSION_RATE",
            "VALUE_HELP_PROVIDER",
            "COLLECTIVE_VALUE_HELP",
            "DERIVATION_FUNCTION",
            "PARENT_CHILD_HIERARCHY_NODE_PROVIDER",
            "ENTERPRISE_SEARCH_PROVIDER",
            "TRANSACTIONAL_INTERFACE",
            "TRANSACTIONAL_QUERY",
            "ANALYTICAL_QUERY",
            "ANALYTICAL_DOCUMENT_STORE",
            "ANALYTICAL_CUBE",
            "ANALYTICAL_DIMENSION",
            "ANALYTICAL_FACT",
            "ANALYTICAL_PARENT_CHILD_HIERARCHY_NODE",
            "ANALYTICAL_KPI",
            "OUTPUT_FORM_DATA_PROVIDER",
            "OUTPUT_EMAIL_DATA_PROVIDER",
            "OUTPUT_PARAMETER_DETERMINATION_DATA_SOURCE",
            "SITUATION_ANCHOR",
            "SITUATION_TRIGGER",
            "SITUATION_DATACONTEXT",
            "EXTERNAL_DATA_PROVIDER",
            "NONE"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "#"
      ],
      "examples": [
        {
          "#": "DATA_STRUCTURE"
        }
      ]
    },
    "@ObjectModel.supportedCapabilities": {
      "type": "array",
      "description": "The property declares the supported usage type for this entity in the context of consuming data models.",
      "x-extension-targets": [
        "Entity",
        "Service"
      ],
      "items": {
        "$ref": "#/definitions/@ObjectModel.SupportedCapabilities_EnumValue"
      }
    },
    "@ObjectModel.foreignKey.association": {
      "description": "The element is of type `cds.Association` which points to the list of values. \n\nUse only for service internal associations. For cross service associations, use the [@EntityRelationship Vocabulary](./entity-relationship) instead.",
      "x-extension-targets": [
        "Type"
      ],
      "x-ref-to-doc": {
        "title": "Element Reference",
        "ref": "#/definitions/ElementReference"
      },
      "$ref": "#/definitions/ElementReference"
    },
    "@ObjectModel.text.element": {
      "type": "array",
      "description": "The property contains element(s) containing a text for the annotated (id)element",
      "x-extension-targets": [
        "Type"
      ],
      "items": {
        "x-ref-to-doc": {
          "title": "Element Reference",
          "ref": "#/definitions/ElementReference"
        }
      },
      "examples": [
        [
          "BillingDocumentTypeName"
        ]
      ]
    },
    "@ObjectModel.text.association": {
      "description": "The element is of type cds.association, which points to an entity containing (language-dependent) texts for the annotated (id) element",
      "x-extension-targets": [
        "Type"
      ],
      "x-ref-to-doc": {
        "title": "Element Reference",
        "ref": "#/definitions/ElementReference"
      },
      "$ref": "#/definitions/ElementReference"
    },
    "@ObjectModel.SupportedCapabilities_EnumValue": {
      "title": "Supported Capabilities Enum Value",
      "type": "object",
      "properties": {
        "#": {
          "type": "string",
          "description": "The entry declares one supported usage type.",
          "enum": [
            "SQL_DATA_SOURCE",
            "CDS_MODELING_DATA_SOURCE",
            "CDS_MODELING_ASSOCIATION_TARGET",
            "DATA_STRUCTURE",
            "LANGUAGE_DEPENDENT_TEXT",
            "UNIT_CONVERSION_RATE",
            "VALUE_HELP_PROVIDER",
            "COLLECTIVE_VALUE_HELP",
            "EXTRACTION_DATA_SOURCE",
            "DERIVATION_FUNCTION",
            "PARENT_CHILD_HIERARCHY_NODE_PROVIDER",
            "SEARCHABLE_ENTITY",
            "ENTERPRISE_SEARCH_PROVIDER",
            "TRANSACTIONAL_PROVIDER",
            "ANALYTICAL_QUERY",
            "ANALYTICAL_DOCUMENT_STORE",
            "ANALYTICAL_DIMENSION",
            "ANALYTICAL_PROVIDER",
            "ANALYTICAL_PARENT_CHILD_HIERARCHY_NODE",
            "ANALYTICAL_KPI",
            "OUTPUT_FORM_DATA_PROVIDER",
            "OUTPUT_EMAIL_DATA_PROVIDER",
            "OUTPUT_PARAMETER_DETERMINATION_DATA_SOURCE",
            "SITUATION_ANCHOR",
            "SITUATION_TRIGGER",
            "SITUATION_DATACONTEXT",
            "KEY_USER_COPYING_TEMPLATE",
            "EXTERNAL_DATA_PROVIDER",
            "ODM_COMPLIANT_PROVIDER"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "#"
      ]
    },
    "@ODM.entityName": {
      "type": "string",
      "description": "The entity represents an ODM Entity with this official name.",
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@ODM.oid": {
      "description": "The annotation references the element which contains the oid.",
      "x-ref-to-doc": {
        "title": "Element Reference",
        "ref": "#/definitions/ElementReference"
      },
      "x-extension-targets": [
        "Entity"
      ],
      "$ref": "#/definitions/ElementReference"
    },
    "@ODM.oidReference.entityName": {
      "type": "string",
      "description": "The property contains an OID for the ODM Entity with this official name",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@PersonalData.entitySemantics": {
      "type": "string",
      "description": "Primary meaning of the entities in the annotated entity set. Entities annotated with @PersonalData.entitySemantics are synonymous to @PersonalData.isPotentiallyPersonal.",
      "oneOf": [
        {
          "const": "DataSubject",
          "description": "Describes a data subject, for example, a customer or vendor."
        },
        {
          "const": "DataSubjectDetails",
          "description": "Describes entities that contain details for a data subject, for example an address."
        },
        {
          "const": "Other",
          "description": "Entities that contain personal data or references to data subjects but do not represent data subjects or details itself. For example: customer quote, customer order, or purchase order."
        }
      ],
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@PersonalData.dataSubjectRole": {
      "type": "string",
      "description": "Role of the data subjects in this set (e.g. employee, customer). Values are application-specific.",
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@PersonalData.dataSubjectRoleDescription": {
      "type": "string",
      "description": "Language-dependent description of the role of the data subjects in this set (e.g. employee, customer). Values are application-specific.",
      "x-extension-targets": [
        "Entity"
      ]
    },
    "@PersonalData.fieldSemantics": {
      "type": "string",
      "description": "Primary meaning of the personal data contained in the annotated property. Changes to values of annotated properties are tracked in the audit log. Use this annotation also on fields that are already marked as contact or address data. Properties annotated with fieldSemantics need not be additionally annotated with @PersonalData.isPotentiallyPersonal.",
      "oneOf": [
        {
          "const": "DataSubjectID",
          "description": "Identifies the data subject unique key or references it."
        },
        {
          "const": "DataSubjectIDType",
          "description": "The type describing the DataSubjectID identifying the data subject, e.g., an e-mail address, semantic of the ID or a customer."
        },
        {
          "const": "ConsentID",
          "description": "The unique identifier for a consent. A consent is an action of data subjects confirming that the usage of their personal data shall be allowed for a given purpose. A consent functionality allows the storage of a consent record in relation to a specific purpose and shows if a data subject has granted, withdrawn, or denied consent."
        },
        {
          "const": "PurposeID",
          "description": "The unique identifier for the purpose of processing of personal data. Any processing of personal data is based on specified, explicit, and legitimate purposes and not further processed in a manner that is incompatible with those purposes. The purpose is defined by the data controller or joint data controllers."
        },
        {
          "const": "ContractRelatedID",
          "description": "The unique identifier for transactional data that is related to a contract that requires processing of personal data. For example, Sales Contract ID, Purchase Contract ID, or Service Contract ID."
        },
        {
          "const": "DataControllerID",
          "description": "The unique identifier of a legal entity which alone or jointly with others determines the purposes and means of the processing of personal data. The Data Controller is fully responsible (and accountable) that data protection and privacy principles (such as purpose limitation or data minimization), defined in the European General Data Protection Regulation (GDPR) or any other data protection legislation, are adhered to when processing personal data. The DataControllerID succeeds the LegalEntityID."
        },
        {
          "const": "UserID",
          "description": "The unique identifier of a user. A user is an individual who interacts with the services supplied by a system."
        },
        {
          "const": "EndOfBusinessDate",
          "description": "Defines the end of active business and the start of residence time and retention period. End of business is the point in time when the processing of a set of personal data is no longer required for the active business, for example, when a contract is fulfilled. After it has been reached and a customer-defined residence period has passed, the data is blocked and can only be accessed by users with special authorizations (for example, tax auditors). All fields of type Edm.Date or Edm.DateTimeOffset on which the end of business determination depends should be annotated."
        },
        {
          "const": "BlockingDate",
          "description": "Defines a date that marks when the provider of the data will block these. This is the point in time when the processing of a set of personal data is no longer required for the active business, for example, when a contract is fulfilled. After it has been reached, the data is blocked in the source and can only be displayed by users with special authorizations (for example, tax auditors); however, it is not allowed to create/change/copy/follow-up blocked data. Consumers of the data should consider if there is an additional purpose to process the data beyond the defined blocking date"
        },
        {
          "const": "EndOfRetentionDate",
          "description": "Defines a date that marks when the provider of the data can destroy these. Consumers of the data should consider if there is an additional purpose (or a legal hold) to process the data beyond the defined destruction date."
        }
      ],
      "x-extension-targets": [
        "Type"
      ]
    },
    "@PersonalData.isPotentiallyPersonal": {
      "type": "boolean",
      "description": "Property contains potentially personal data. Properties annotated with `@PersonalData.fieldSemantics` need not be additionally annotated with this annotation. Personal data describes any information which is related to an identified or identifiable natural person (data subject). An identifiable person is one who can be identified, directly or indirectly, in particular by a reference to an identifier such as a name, an identification number, location data, an online identifier, or to one or more factors specific to the physical, physiological, genetic, mental, economic, cultural, or social identity of that natural person.",
      "default": true,
      "x-extension-targets": [
        "Type"
      ]
    },
    "@PersonalData.isPotentiallySensitive": {
      "type": "boolean",
      "description": "Property contains potentially sensitive personal data. Sensitive personal data is a category of personal data that needs special handling. The determination which personal data is sensitive may differ for different legal areas or industries.\nExamples of sensitive personal data:\n-\tSpecial categories of personal data, such as data revealing racial or ethnic origin, political opinions, religious or philosophical beliefs, trade union membership, genetic data, biometric data, data concerning health or sex life or sexual orientation.\n-\tPersonal data subject to professional secrecy\n-\tPersonal data relating to criminal or administrative offenses\n-\tPersonal data concerning insurances and bank or credit card accounts",
      "default": true,
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.currencyCode": {
      "type": "boolean",
      "const": true,
      "description": "The property contains a currency code.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.amount.currencyCode": {
      "description": "The element contains an amount. The annotation points to an element containing the currency code.",
      "x-ref-to-doc": {
        "title": "Element Reference",
        "ref": "#/definitions/ElementReference"
      },
      "x-extension-targets": [
        "Type"
      ],
      "$ref": "#/definitions/ElementReference"
    },
    "@Semantics.unitOfMeasure": {
      "type": "boolean",
      "const": true,
      "description": "The property contains a unit of measure.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.quantity.unitOfMeasure": {
      "description": "The element contains a quantity.\nThe annotation points to an element containing the unit of measure.",
      "x-ref-to-doc": {
        "title": "Element Reference",
        "ref": "#/definitions/ElementReference"
      },
      "x-extension-targets": [
        "Type"
      ],
      "$ref": "#/definitions/ElementReference"
    },
    "@Semantics.calendar.dayOfMonth": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.dayOfYear": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.week": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.month": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.quarter": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.halfyear": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.year": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.yearWeek": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.yearMonth": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.yearQuarter": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.calendar.yearHalfyear": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.yearVariant": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.period": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.year": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.yearPeriod": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.quarter": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.yearQuarter": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.week": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.yearWeek": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.fiscal.dayOfYear": {
      "type": "boolean",
      "const": true,
      "description": "",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.language": {
      "type": "boolean",
      "const": true,
      "description": "The property contains a language code.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.time": {
      "type": "boolean",
      "const": true,
      "description": "This annotation is used to indicate a date semantic for the NVARCHAR-based ABAP type TIMS.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.text": {
      "type": "boolean",
      "const": true,
      "description": "The property contains a human-readable text.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.uuid": {
      "type": "boolean",
      "const": true,
      "description": "Tags a field containing a GUID in RAW16 or CHAR32 format.",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.businessDate.from": {
      "type": "boolean",
      "const": true,
      "description": "The property contains a date which is the lower boundary of a (validity) interval (for time dependent master data).",
      "x-extension-targets": [
        "Type"
      ]
    },
    "@Semantics.businessDate.to": {
      "type": "boolean",
      "const": true,
      "description": "The property contains a date which is the upper boundary of a (validity) interval (for time dependent master data).",
      "x-extension-targets": [
        "Type"
      ]
    }
  },
  "x-context": [
    "./spec/v1/CSN-Interop-Effective.schema.yaml",
    "CsnInteropEffectiveRoot"
  ],
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri-reference",
      "description": "Link to JSON Schema for this CSN Interop Effective document.\nAdding this helps with automatic validation and code intelligence in some editors / IDEs.\n\nSee https://tour.json-schema.org/content/06-Combining-Subschemas/02-id-and-schema\n",
      "anyOf": [
        {
          "const": "https://sap.github.io/csn-interop-specification/spec-v1/csn-interop-effective.schema.json"
        },
        {
          "type": "string",
          "format": "uri-reference"
        }
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "$schema"
      ]
    },
    "$id": {
      "type": "string",
      "format": "uri-reference",
      "description": "Optional URI for this document, that can acts as an ID or as location to retrieve the document.\n\nSee https://tour.json-schema.org/content/06-Combining-Subschemas/02-id-and-schema\n",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "$id"
      ]
    },
    "csnInteropEffective": {
      "type": "string",
      "description": "Existence of this property indicated that the file is a CSN Interop Effective document.\nThe value states the specification version it has been created against.",
      "enum": [
        "1.0"
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "csnInteropEffective"
      ]
    },
    "$version": {
      "type": "string",
      "description": "The version of the CDS CSN. For this version of CSN Interop it is fixed to `2.0`.\n\nThis MUST be provided to ensure that CSN Interop is a valid subset of CDS CSN in general.",
      "enum": [
        "2.0"
      ],
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "$version"
      ]
    },
    "meta": {
      "type": "object",
      "description": "Meta information that apply to the CSN document as a whole.",
      "$ref": "#/definitions/Meta",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "meta"
      ]
    },
    "definitions": {
      "$ref": "#/definitions/Definitions",
      "description": "Dictionary of CSN modeling artifacts.\n",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "definitions"
      ]
    },
    "i18n": {
      "$ref": "#/definitions/i18n",
      "description": "Dictionary of translated texts.\n",
      "x-context": [
        "./spec/v1/CSN-Interop-Effective.schema.yaml",
        "CsnInteropEffectiveRoot",
        "i18n"
      ]
    }
  },
  "patternProperties": {
    "^__.+$": {
      "type": [
        "string",
        "number",
        "boolean",
        "array",
        "object"
      ],
      "description": "Private properties, starting with `__`.\n\nMAY be ignored by the consumers, as they have no cross-aligned, standardized semantics.\n",
      "tsType": "unknown // replaceKeyType_{PrivatePropertyKey}"
    }
  },
  "required": [
    "csnInteropEffective",
    "$version",
    "definitions"
  ],
  "additionalProperties": false
}